// Autogenerated by extract.py for Jgments: Do not edit!

package com.google.jgments.syntax;

import com.google.jgments.TokenActions;
import com.google.jgments.TokenMatcher;
import com.google.jgments.StateActions;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;

/**
 * This is an example syntax class of the sort derived by extract.py.
 * It is checked in as a reference; in general, syntax files are generated during the compile
 * and not checked in.
 */
public class ExampleSyntax extends AbstractLanguageDefinition<ExampleSyntax.State> {
  public enum State implements LanguageDefinition.State {
      ROOT,
      COMMON,
      LOOP
  }

  public State getRootState() {
    return State.ROOT;
  }

  @Override
  protected Class<State> getStateClass() {
    return State.class;
  }

  @Override
  protected String getFileNamePattern() {
    return "(.*\\.bf)$";
  }

  public static final TokenActions.Action USING_THIS = new TokenActions.UsingAction() {
    @Override
    public LanguageDefinition getLanguageDefinition() {
      return INSTANCE;
    }
  };

  public static final LanguageDefinition INSTANCE = new ExampleSyntax();

  public ExampleSyntax() {
    super(new ImmutableMap.Builder<State, ImmutableList<TokenMatcher>>()
        .put(State.ROOT, new ImmutableList.Builder<TokenMatcher>()
            .add(new TokenMatcher(
                "\\[",
                TokenActions.singleToken(Token.KEYWORD),
                StateActions.push(State.LOOP)))
            .add(new TokenMatcher(
                "\\]",
                TokenActions.singleToken(Token.ERROR),
                StateActions.NOOP))
            .add(new TokenMatcher(
                "[.,]+",
                TokenActions.singleToken(Token.NAME_TAG),
                StateActions.NOOP))
            .add(new TokenMatcher(
                "[+-]+",
                TokenActions.singleToken(Token.NAME_BUILTIN),
                StateActions.NOOP))
            .add(new TokenMatcher(
                "[<>]+",
                TokenActions.singleToken(Token.NAME_VARIABLE),
                StateActions.NOOP))
            .add(new TokenMatcher(
                "[^.,+\\-<>\\[\\]]+",
                TokenActions.singleToken(Token.COMMENT),
                StateActions.NOOP))
            .build()
        )
        .put(State.COMMON, new ImmutableList.Builder<TokenMatcher>()
            .add(new TokenMatcher(
                "[.,]+",
                TokenActions.singleToken(Token.NAME_TAG),
                StateActions.NOOP))
            .add(new TokenMatcher(
                "[+-]+",
                TokenActions.singleToken(Token.NAME_BUILTIN),
                StateActions.NOOP))
            .add(new TokenMatcher(
                "[<>]+",
                TokenActions.singleToken(Token.NAME_VARIABLE),
                StateActions.NOOP))
            .add(new TokenMatcher(
                "[^.,+\\-<>\\[\\]]+",
                TokenActions.singleToken(Token.COMMENT),
                StateActions.NOOP))
            .build()
        )
        .put(State.LOOP, new ImmutableList.Builder<TokenMatcher>()
            .add(new TokenMatcher(
                "\\[",
                TokenActions.singleToken(Token.KEYWORD),
                StateActions.DUPLICATE_TOP))
            .add(new TokenMatcher(
                "\\]",
                TokenActions.singleToken(Token.KEYWORD),
                StateActions.pop(1)))
            .add(new TokenMatcher(
                "[.,]+",
                TokenActions.singleToken(Token.NAME_TAG),
                StateActions.NOOP))
            .add(new TokenMatcher(
                "[+-]+",
                TokenActions.singleToken(Token.NAME_BUILTIN),
                StateActions.NOOP))
            .add(new TokenMatcher(
                "[<>]+",
                TokenActions.singleToken(Token.NAME_VARIABLE),
                StateActions.NOOP))
            .add(new TokenMatcher(
                "[^.,+\\-<>\\[\\]]+",
                TokenActions.singleToken(Token.COMMENT),
                StateActions.NOOP))
            .build()
        )
        .build());
  }
}
