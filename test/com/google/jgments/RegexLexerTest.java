// Copyright 2010 Google Inc. All Rights Reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

package com.google.jgments;

import com.google.common.collect.ImmutableList;
import com.google.jgments.syntax.JavaSyntax;
import com.google.jgments.syntax.LanguageDefinition;
import com.google.jgments.syntax.PythonSyntax;
import com.google.jgments.syntax.Token;

import junit.framework.TestCase;

import java.util.List;

/**
 * Lexer end-to-end tests.
 *
 * TODO(jacobly): write a test type that spawns Pygments and compares tokens generated by
 * Pygments and Jgments on example test files.
 */
public class RegexLexerTest extends TestCase {

  public void testSimple() {
    RegexLexer lexer = new RegexLexer(
        PythonSyntax.INSTANCE, "print 'Hello, world!', 5+10 # hello");
    // Consume the iterator into a list.
    List<SyntaxSpan> tokens = ImmutableList.copyOf(lexer.iterator());
    assertEquals(ImmutableList.of(
        new SyntaxSpan(0, 5, Token.KEYWORD),
        new SyntaxSpan(5, 6, Token.TEXT),
        new SyntaxSpan(6, 7, Token.LITERAL_STRING),
        new SyntaxSpan(7, 20, Token.LITERAL_STRING),
        new SyntaxSpan(20, 21, Token.LITERAL_STRING),
        new SyntaxSpan(21, 22, Token.PUNCTUATION),
        new SyntaxSpan(22, 23, Token.TEXT),
        new SyntaxSpan(23, 24, Token.LITERAL_NUMBER_INTEGER),
        new SyntaxSpan(24, 25, Token.OPERATOR),
        new SyntaxSpan(25, 27, Token.LITERAL_NUMBER_INTEGER),
        new SyntaxSpan(27, 28, Token.TEXT),
        new SyntaxSpan(28, 35, Token.COMMENT)
        ), tokens);
  }

  public void testSelfReference() {
    // The Java lexer delegates to itself (i.e. the Pygments version has "using(this)")
    // to process function return types.
    RegexLexer lexer = new RegexLexer(
        JavaSyntax.INSTANCE, "int main();");
    List<SyntaxSpan> tokens = ImmutableList.copyOf(lexer.iterator());
    assertEquals(ImmutableList.of(
        new SyntaxSpan(0, 3, Token.KEYWORD_TYPE),
        new SyntaxSpan(3, 4, Token.TEXT),
        new SyntaxSpan(4, 8, Token.NAME_FUNCTION),
        // TODO(jacobly): the Pygments version does not yield this empty annotation.
        new SyntaxSpan(8, 8, Token.TEXT),
        new SyntaxSpan(8, 9, Token.OPERATOR),
        new SyntaxSpan(9, 10, Token.OPERATOR),
        new SyntaxSpan(10, 11, Token.OPERATOR)
        ), tokens);
  }

  public void testResume() {
    LanguageDefinition lang = PythonSyntax.INSTANCE;
    LexerState resumedState = new LexerState(lang.getRootState());
    resumedState.setPos(10);
    resumedState.push(PythonSyntax.State.SQS);  // Single-quoted string.
    RegexLexer lexer = new RegexLexer(
        lang, "print 'Hello, world!', '''foo\n\bar'''", resumedState);
    List<SyntaxSpan> tokens = ImmutableList.copyOf(lexer);
    assertEquals(ImmutableList.of(
        new SyntaxSpan(10, 20, Token.LITERAL_STRING),
        new SyntaxSpan(20, 21, Token.LITERAL_STRING),
        new SyntaxSpan(21, 22, Token.PUNCTUATION),
        new SyntaxSpan(22, 23, Token.TEXT),
        new SyntaxSpan(23, 36, Token.LITERAL_STRING_DOC)
        ), tokens);
  }
}
